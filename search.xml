<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dockerfile 时区定义</title>
      <link href="/2020/03/20/dockerfile-timezone/"/>
      <url>/2020/03/20/dockerfile-timezone/</url>
      
        <content type="html"><![CDATA[<p>在构建镜像的时候需要定义一下时区。</p><h4 id="Alpine-基础镜像修改时区"><a href="#Alpine-基础镜像修改时区" class="headerlink" title="Alpine 基础镜像修改时区"></a>Alpine 基础镜像修改时区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 更换源</span><br><span class="line">RUN sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br><span class="line"># 修改时区并删除缓存</span><br><span class="line">RUN apk add --no-cache tzdata \</span><br><span class="line">    &amp;&amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \</span><br><span class="line">    &amp;&amp;rm -rf /var/cache/apk/* /tmp/* /var/tmp/* $HOME/.cache ## 清除缓存</span><br></pre></td></tr></table></figure><p>Check this <a href="https://jclian.com/2020/03/20/dockerfile-timezone/">https://jclian.com/2020/03/20/dockerfile-timezone/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequelize 的一些技巧</title>
      <link href="/2020/03/19/memo-about-sequelize/"/>
      <url>/2020/03/19/memo-about-sequelize/</url>
      
        <content type="html"><![CDATA[<h3 id="inner-join-amp-left-join"><a href="#inner-join-amp-left-join" class="headerlink" title="inner join &amp; left join"></a>inner join &amp; left join</h3><blockquote><p>required: true forces an inner join, use required: false to force a left join.<br><code>required: true</code> 强制使用使用inner join, 使用 <code>required: false</code> 强制使用left join</p></blockquote><p>这是引用自官方issues 下的讨论。<br><a href="https://github.com/sequelize/sequelize/issues/3936" target="_blank" rel="noopener">LEFT JOIN instead of INNER JOIN in findAndCountAll, count part #3936</a></p><p>已经很清晰了。</p><p>Check this <a href="https://jclian.com/2020/03/19/memo-about-sequelize/">https://jclian.com/2020/03/19/memo-about-sequelize/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Sequelize </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android消息推送的一些个人理解</title>
      <link href="/2020/03/06/somethings-about-android-push-service/"/>
      <url>/2020/03/06/somethings-about-android-push-service/</url>
      
        <content type="html"><![CDATA[<h1 id="关于消息推送"><a href="#关于消息推送" class="headerlink" title="关于消息推送"></a>关于消息推送</h1><h2 id="什么是消息推送？"><a href="#什么是消息推送？" class="headerlink" title="什么是消息推送？"></a>什么是消息推送？</h2><p>“消息推送（Push）指运营人员通过自己的产品或第三方工具对用户移动设备进行的主动消息推送”。这句话讲的是一个运营概念。本质上，我们做技术的理解的消息推送应该是客户端将服务端更新的信息通知给客户。</p><h2 id="推送的分类"><a href="#推送的分类" class="headerlink" title="推送的分类"></a>推送的分类</h2><ul><li>APNs（Apple Push Notification services，即苹果推送通知服务）</li><li>FCM（Firebase Cloud Messaging），原来叫 GCM（Google Cloud Messaging）；因为众所周知的原因，在国内无法使用。</li><li>第三方的推送服务。国内比较知名的有：小米推送、华为推送、腾讯信鸽、阿里云推送、个推、极光推送等。  </li></ul><h2 id="有什么实现方案？"><a href="#有什么实现方案？" class="headerlink" title="有什么实现方案？"></a>有什么实现方案？</h2><p>下面就来讨论下，有什么方式去实现一个推送服务。大概就下面几种：</p><ol><li><p>轮询</p><p> 客户端定期发起，服务器不需要知道客户端地址是什么，有消息直接响应客户端的请求即可。可以说是最简单的实现方案。如果推送对于实时性的要求不高的话，这种方案相当适合。但是在邦讯的产品里面，实时性的要求还是相对比较高的，譬如蓝牙门禁要求平台新增任务，客户端马上可以看见，这个大概就是10s内。目前门禁App用的就是这种方案（每10s 请求一次）。那么带来的问题就是，电量和流量的快速消耗。稍微在后台驻留久一点就会被任务管理干掉。</p></li><li><p>SMS</p><p> 借助短信实现信息的展示，就是弹个短信到通知栏的效果。优点是到达率高、可靠和稳定。缺点也相当明显。短信的成本太高；需要运营商的配合；短信很容易被挟持。    </p></li><li><p>长连接</p><p> 客户端与服务器建立TCP长连接。客户端向服务器定时发送心跳包。有消息的时候，服务器通过已建立的TCP连接通知客户端。这个应该是目前最佳的方案。</p></li><li><p>XMPP, MQTT等</p></li></ol><h2 id="长连接和心跳"><a href="#长连接和心跳" class="headerlink" title="长连接和心跳"></a>长连接和心跳</h2><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p><img src="./connections.jpg" alt="persistent connection"></p><h4 id="长连接断开的原因"><a href="#长连接断开的原因" class="headerlink" title="长连接断开的原因"></a>长连接断开的原因</h4><ol><li>客户端和服务器链路故障</li><li>服务器宕机</li><li>网线被挖断</li><li>NAT 超时  </li><li>网络状态切换</li><li>DHCP 的租期</li></ol><h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><h2 id="市面上的产品"><a href="#市面上的产品" class="headerlink" title="市面上的产品"></a>市面上的产品</h2><h4 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h4><p><img src="https://communityfile-drcn.op.hicloud.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20200121152547.29452826487859134320028369605651:50510120091754:2800:9F8B751FFD23EB7A3FD4A9D6EF369568D777EDFD68EBBDCE9469C51DCD140929.jpg?needInitFileName=true?needInitFileName=true" alt></p><h4 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h4><p><img src="https://f5.market.mi-img.com/download/MiPass/0de2d4f855c08ed2343e17463d29fd4644d4160f8/MiPush%E9%80%BB%E8%BE%91%E5%9B%BE.png" alt></p><h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><p><img src="https://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/pic/30049/cn_zh/1546048282352/%E5%9B%BE%E7%89%87.png" alt></p><h4 id="腾讯信鸽"><a href="#腾讯信鸽" class="headerlink" title="腾讯信鸽"></a>腾讯信鸽</h4><p><img src="https://xg.qq.com/docs/assets/%E4%BF%A1%E9%B8%BD%E6%9C%8D%E5%8A%A1%E6%B5%81%E7%A8%8B%E6%80%BB%E8%A7%88.png" alt></p><h2 id="市面产品的横评"><a href="#市面产品的横评" class="headerlink" title="市面产品的横评"></a>市面产品的横评</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:center">小米推送</th><th style="text-align:center">华为推送</th><th style="text-align:center">腾讯信鸽</th><th style="text-align:center">阿里云推送</th><th style="text-align:center">极光推送</th><th style="text-align:center">个推</th></tr></thead><tbody><tr><td style="text-align:left">APNs</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">FCM</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">服务端SDK（C#）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">服务端SDK（.Net）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">服务端SDK（Golang）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes（非官方）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:left">服务端SDK（C/C++）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">服务端SDK（Python）</td><td style="text-align:center">yes</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">服务端SDK（PHP）</td><td style="text-align:center">yes</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">服务端SDK（Node.js）</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">yes（非官方）</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">服务端SDK（Java）</td><td style="text-align:center">yes</td><td style="text-align:center">-</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:left">OpenAPI</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr></tbody></table><h2 id="统一推送联盟"><a href="#统一推送联盟" class="headerlink" title="统一推送联盟"></a>统一推送联盟</h2><p>下面这一段是引用自统一推送联盟官网的简介：</p><blockquote><p>统一推送联盟成立于 <strong>2017年10月</strong> ，挂靠单位是电信终端产业协会（TAF），接受工业和信息化部业务指导，住所设在北京。联盟核心任务是：探索推送行业创新，促进终端生产厂商、应用开发厂商和第三方服务提供商等进行深入合作，整合行业资源，助推形成统一的推送体系，创造绿色环境，减少与终端用户的利益冲突，提升整体行业形象，降低整体行业的实现成本，形成自律基础上的产业链协同发展，实现产业的共同繁荣。</p><p>统一推送联盟是在自愿、平等、互利、合作的基础上，由国内外消息推送产业相关的企、事业单位、社团组织、高等院校、科研院所等自愿结成的跨行业、开放性、非营利性的社会组织。本联盟旨在促进相关主体之间的交流和深度合作，促进供需对接和知识共享，形成优势互补，有效推进消息推送产业的发展，切实解决产业现实问题。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/entry/56dc5578efa6310054d8cf1c" target="_blank" rel="noopener"># Android推送技术的研究</a></p><p><a href="https://juejin.im/post/58db17b961ff4b006ce2ebc9" target="_blank" rel="noopener"># 安卓推送这件小事</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994" target="_blank" rel="noopener"># Android微信智能心跳方案</a></p><p>Check this <a href="https://jclian.com/2020/03/06/somethings-about-android-push-service/">https://jclian.com/2020/03/06/somethings-about-android-push-service/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发小技巧-CompoundButton</title>
      <link href="/2020/03/06/android-memo-somethings-about-developer/"/>
      <url>/2020/03/06/android-memo-somethings-about-developer/</url>
      
        <content type="html"><![CDATA[<p>记录开发过程中的各种小技巧</p><h3 id="CompoundButton"><a href="#CompoundButton" class="headerlink" title="CompoundButton"></a>CompoundButton</h3><p>CompoundButton赋值不执行业务代码</p><ol><li><p>加上这个判定在使用setChecked方法或者isChecked属性的时候，就不会触发我们的业务代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnCheckedChangeListener &#123; buttonView, isChecked -&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!buttonView.isPressed) &#123;</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@setOnCheckedChangeListener</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用setOnClickListener</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnClickListener&#123;</span><br><span class="line">    <span class="keyword">if</span>(it.isChecked) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 赋值不触发onClickListener</span></span><br><span class="line">compoundButton.isChecked = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>赋值前设置listener先设为null</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnCheckedChangeListener(<span class="literal">null</span>)</span><br><span class="line">compoundButton.isChecked = <span class="literal">true</span></span><br><span class="line">compoundButton.setOnCheckedChangeListener(listener)</span><br></pre></td></tr></table></figure></li><li><p>Kotlin扩展方法 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">fun</span> CompoundButton.<span class="title">setCustomChecked</span><span class="params">(value: <span class="type">Boolean</span>,listener: <span class="type">CompoundButton</span>.<span class="type">OnCheckedChangeListener</span>)</span></span> &#123;</span><br><span class="line">     setOnCheckedChangeListener(<span class="literal">null</span>)</span><br><span class="line">     isChecked = value</span><br><span class="line">     setOnCheckedChangeListener(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对CheckBox、RadioButton、Switch都有效。</p><p>Check this <a href="https://jclian.com/2020/03/06/android-memo-somethings-about-developer/">https://jclian.com/2020/03/06/android-memo-somethings-about-developer/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发小技巧</title>
      <link href="/2020/03/06/android-memo-compoundbutton/"/>
      <url>/2020/03/06/android-memo-compoundbutton/</url>
      
        <content type="html"><![CDATA[<p>记录开发过程中的各种小技巧</p><h3 id="CompoundButton"><a href="#CompoundButton" class="headerlink" title="CompoundButton"></a>CompoundButton</h3><p>CompoundButton赋值不执行业务代码</p><ol><li><p>加上这个判定在使用setChecked方法或者isChecked属性的时候，就不会触发我们的业务代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnCheckedChangeListener &#123; buttonView, isChecked -&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!buttonView.isPressed) &#123;</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@setOnCheckedChangeListener</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用setOnClickListener</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnClickListener&#123;</span><br><span class="line">    <span class="keyword">if</span>(it.isChecked) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 赋值不触发onClickListener</span></span><br><span class="line">compoundButton.isChecked = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>赋值前设置listener先设为null</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compoundButton.setOnCheckedChangeListener(<span class="literal">null</span>)</span><br><span class="line">compoundButton.isChecked = <span class="literal">true</span></span><br><span class="line">compoundButton.setOnCheckedChangeListener(listener)</span><br></pre></td></tr></table></figure></li><li><p>Kotlin扩展方法 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">fun</span> CompoundButton.<span class="title">setCustomChecked</span><span class="params">(value: <span class="type">Boolean</span>,listener: <span class="type">CompoundButton</span>.<span class="type">OnCheckedChangeListener</span>)</span></span> &#123;</span><br><span class="line">     setOnCheckedChangeListener(<span class="literal">null</span>)</span><br><span class="line">     isChecked = value</span><br><span class="line">     setOnCheckedChangeListener(listener)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对CheckBox、RadioButton、Switch都有效。</p><p>Check this <a href="https://jclian.com/2020/03/06/android-memo-compoundbutton/">https://jclian.com/2020/03/06/android-memo-compoundbutton/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 USB 继电器开关小风扇</title>
      <link href="/2020/03/03/pi-and-switch/"/>
      <url>/2020/03/03/pi-and-switch/</url>
      
        <content type="html"><![CDATA[<p>有一段时间，公司看门的大叔老提醒我：”工位上的的小风扇没有关了”。</p><p>因为懒和经常忘，弄了个usb串口继电器。接树莓派上，定时开关桌面上的小风扇。<br>windows下也可以用。</p><p>继电器型号 LCUS-1</p><p><img src="https://github.com/bqbs/usb_serial_switch/raw/master/IMG_20200116_103758.jpg" alt></p><p>Check this <a href="https://jclian.com/2020/03/03/pi-and-switch/">https://jclian.com/2020/03/03/pi-and-switch/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Coding4fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dota2英雄颜色排序</title>
      <link href="/2019/08/22/sort_dota2_heros/"/>
      <url>/2019/08/22/sort_dota2_heros/</url>
      
        <content type="html"><![CDATA[<h2 id="Dota2-英雄颜色排序"><a href="#Dota2-英雄颜色排序" class="headerlink" title="Dota2 英雄颜色排序"></a>Dota2 英雄颜色排序</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/bqbs/sort_heros" target="_blank" rel="noopener">Github</a></p><h3 id="希望想实现的效果"><a href="#希望想实现的效果" class="headerlink" title="希望想实现的效果"></a>希望想实现的效果</h3><p><img src="./heros_hoho.jpg" alt="heros_hoho"></p><h3 id="提取到主色调"><a href="#提取到主色调" class="headerlink" title="提取到主色调"></a>提取到主色调</h3><p><img src="./colors_1565625306.png" alt="colors_1565625306"></p><h3 id="排序的结果"><a href="#排序的结果" class="headerlink" title="排序的结果"></a>排序的结果</h3><p><img src="./sort_heros1565625306.png" alt="sort_heros1565625306"></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>看起来效果不是很棒，相信要达到微博截图的效果还是挺难得。</li><li>本人是个py新手，项目花了一点时间，到处复制粘贴代码写的。</li><li>项目不是很完善，会努力完善的。</li><li>如果你点进来了，让你失望了，见谅。</li></ul><p>Check this <a href="https://jclian.com/2019/08/22/sort_dota2_heros/">https://jclian.com/2019/08/22/sort_dota2_heros/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Coding4fun </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Dota2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Tiny4412开发板的折腾记录</title>
      <link href="/2019/04/01/somethings_about_Tiny4412/"/>
      <url>/2019/04/01/somethings_about_Tiny4412/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自己在折腾这块开发板的时候找到的资料很少，挺痛苦的，记录一下自己折腾出来的一些东西，希望对其他小伙伴有帮助吧。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>开发板：Tiny 4412/Super4412SDK 1611b</li><li>系统：Android 5.0</li><li>内核版本:linux 3.0.86</li></ul><h1 id="复用为GPIO"><a href="#复用为GPIO" class="headerlink" title="复用为GPIO"></a>复用为GPIO</h1><h2 id="GPX3"><a href="#GPX3" class="headerlink" title="GPX3"></a>GPX3</h2><blockquote><p>在我的需求里面，需要用上GPX3_2、GPX3_3、GPX3_4和GPX3_5这四个pin。<br>这几个pin作为输入跟开发板上的测试按键（K1~K4）绑定。</p></blockquote><ul><li>复用这几pin，我们需要 <strong>取消</strong> Tiny4412板上按键的驱动<img src="/2019/04/01/somethings_about_Tiny4412/sat_1.png" title="按键驱动"></li></ul><p>位置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; Device Drivers</span><br><span class="line">  -&gt; Character devices</span><br><span class="line">    -&gt; Buttons driver for FriendlyARM Tiny4412 development boards</span><br></pre></td></tr></table></figure></p><ul><li>如果没有看见这个选项， 我们需要 <strong>取消</strong> 选定下面的选项，启用这个配置<img src="/2019/04/01/somethings_about_Tiny4412/sat_2.png" title="GPIO driver support"></li></ul><p>位置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-&gt;Device Drivers</span><br><span class="line">  -&gt;Input device support </span><br><span class="line">    -&gt;Miscellaneous drivers</span><br><span class="line">      -&gt;GPIO driver support</span><br></pre></td></tr></table></figure></p><p>如果有什么疑问或者建议欢迎留言交流</p><p>持续更新中。。。</p><p>Check this <a href="https://jclian.com/2019/04/01/somethings_about_Tiny4412/">https://jclian.com/2019/04/01/somethings_about_Tiny4412/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux烂笔头—常用命令</title>
      <link href="/2019/04/01/linux_notes_for_me/"/>
      <url>/2019/04/01/linux_notes_for_me/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录自己使用Linux过程中的一些指令，备忘。</p></blockquote><h2 id="切换Java版本"><a href="#切换Java版本" class="headerlink" title="切换Java版本"></a>切换Java版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><h2 id="查看android开发板上GPIO针脚的状态"><a href="#查看android开发板上GPIO针脚的状态" class="headerlink" title="查看android开发板上GPIO针脚的状态"></a>查看android开发板上GPIO针脚的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cat /sys/kernel/debug/gpio</span><br></pre></td></tr></table></figure><h2 id="替代scp"><a href="#替代scp" class="headerlink" title="替代scp"></a>替代scp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czf - ./* | ssh [user]@[host] tar xzf - -C ~/saved_tree</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh [user]@[host] &quot;tar czf - ~/saved_tree&quot; | tar xzvf - -C ./</span><br></pre></td></tr></table></figure></p><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><h2 id="安装Ubuntu后的几个操作"><a href="#安装Ubuntu后的几个操作" class="headerlink" title="安装Ubuntu后的几个操作"></a>安装Ubuntu后的几个操作</h2><ol><li><p>安装chromium浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chromium-browser</span><br></pre></td></tr></table></figure></li><li><p>安装插件<br><a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">SwitchyOmega</a></p></li><li>安装s_s</li></ol><h2 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h2><ol><li>内置读卡器识别不了，执行一下指令。重启电脑后应该可以识别。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall udisks2</span><br></pre></td></tr></table></figure></li></ol><p>不定期更新。。。</p><p>Check this <a href="https://jclian.com/2019/04/01/linux_notes_for_me/">https://jclian.com/2019/04/01/linux_notes_for_me/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins安装、升级&amp;迁移</title>
      <link href="/2019/04/01/use_jenkins/"/>
      <url>/2019/04/01/use_jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-amp-升级"><a href="#安装-amp-升级" class="headerlink" title="安装 &amp; 升级"></a>安装 &amp; 升级</h2><p><a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/</a> </p><p>官方文档非常详细。建议查阅官方文档。</p><p>下面记录一下自己迁移的一点点经验。</p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>迁移步骤：</p><ol><li><p>保持你的原服务和新服务为同一个版本的Jenkins。（建议使用相同版本迁移，有需要新服务再升级）</p></li><li><p>停机，关停新旧服务。</p></li><li><p>迁移文件</p><p> 原服务器执行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -e <span class="string">"ssh -p22"</span> -avpgolr --delete /var/jenkins/ [新服务器用户名]@[新服务器的host]:[新服务下JENKINS_HOME目录]</span><br></pre></td></tr></table></figure><p> 这一步是在老服务器上把文件拷贝到新服务器上</p></li><li><p>变更文件所有者</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R jenkins:jenkins [/path/to/JENKINS_HOME]</span><br></pre></td></tr></table></figure></li><li><p>重启Jenkins服务</p></li></ol><p>Check this <a href="https://jclian.com/2019/04/01/use_jenkins/">https://jclian.com/2019/04/01/use_jenkins/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派直播推流</title>
      <link href="/2019/04/01/raspberry_pi_camera_live_streaming/"/>
      <url>/2019/04/01/raspberry_pi_camera_live_streaming/</url>
      
        <content type="html"><![CDATA[<p>折腾了一下树莓派摄像头直播推流，记录一下这个过程。面向搜索引擎的debug，莫见怪。</p><p>首先，肯定是搜索相关的东西啦，找到了一篇比较详细的文章《<a href="http://shumeipai.nxez.com/2017/11/01/build-rtmp-stream-live-server-with-raspberry-pi.html" target="_blank" rel="noopener">用树莓派做 RTMP 流直播服务器，可推送至斗鱼直播</a>》。<br>按照文章的做法实践下来，基本上是可行的。<br>但是这个教程下来，直播是没有声音的。我所使用的usb摄像头虽然集成了麦克风，但不确定是否可用，所以需要测试一下。</p><p>在网上搜到了一篇文章：</p><p>测试的麦克风，可以读一下<strong>Watchtower</strong>的《 <a href="https://zhuanlan.zhihu.com/p/22685974" target="_blank" rel="noopener">树莓派上麦克风的使用方式</a>》</p><p>确定你的摄像头音视频都没问题之后，可以使用下面这条指令推流到斗鱼</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gst-launch-1.0 -v --gst-debug=flvmux:0,rtmpsink:0 v4l2src device=/dev/video0 ! 'video/x-raw, width=640, height=480, framerate=30/1' ! queue ! videoconvert ! omxh264enc ! h264parse ! queue ! mux. alsasrc device='plughw:1,0' ! audio/x-raw,width=16,depth=16,rate=44100,channel=1 ! queue ! audioconvert ! audioresample ! voaacenc ! aacparse ! queue ! flvmux streamable=true name=mux ! queue ! rtmpsink location='rtmp://[斗鱼推流地址]/[推流码] live=1'</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>确认摄像头是否支持录制的分辨率</li><li>如果听不到声音，可以适当降低采样率（rate=44100）</li></ul><p><a href="https://github.com/socallinuxexpo/video-capture/wiki/GStreamer-notes" target="_blank" rel="noopener">GStreamer-notes</a><br>底下有一段推送音视频到油管的，可以稍微参考一下。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://github.com/socallinuxexpo/video-capture/wiki/GStreamer-notes" target="_blank" rel="noopener">GStreamer-notes</a><br><a href="http://shumeipai.nxez.com/2017/11/01/build-rtmp-stream-live-server-with-raspberry-pi.html" target="_blank" rel="noopener">用树莓派做 RTMP 流直播服务器，可推送至斗鱼直播</a><br><a href="https://www.zhihu.com/people/xu-tian-yu-70-52" target="_blank" rel="noopener">树莓派上麦克风的使用方式</a></p><p>简单记录，利己利人。</p><p>Check this <a href="https://jclian.com/2019/04/01/raspberry_pi_camera_live_streaming/">https://jclian.com/2019/04/01/raspberry_pi_camera_live_streaming/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> Raspberry Pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Raspberry Pi </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World.</title>
      <link href="/2019/04/01/Hello/"/>
      <url>/2019/04/01/Hello/</url>
      
        <content type="html"><![CDATA[<p>某书不太行呀。发邮件申诉解锁文章，一周过去，啥消息都没回。</p><p>所以决定自己维护了。能不能让大家看到就随缘吧。</p><p>努力写点什么。</p><p>坚持写点什么。</p><p>Check this <a href="https://jclian.com/2019/04/01/Hello/">https://jclian.com/2019/04/01/Hello/</a> @一窝鸡尼斯</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小声BB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
